<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="10"/>
        <property name="maxIdle" value="10"/>
        <property name="minIdle" value="2"/>
        <property name="maxWaitMillis" value="15000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="numTestsPerEvictionRun" value="3"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="true"/>
        <property name="testWhileIdle" value="true"/>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="hostName" value="192.168.1.6"/>
        <property name="port" value="6379"/>
        <property name="timeout" value="15000"/>
        <property name="database" value="0"/>
        <property name="password" value="123456"/>
        <property name="usePool" value="true"/>
        <property name="poolConfig" value="jedisPoolConfig"/>
    </bean>

    <!--redis template definition-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--序列化方式 建议key/hashKey采用StringRedisSerializer-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!--如果不配置Serializer,那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误can‘t cast to string！-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>
    <!--<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">-->
    <!--<constructor-arg index="0" ref="jedisPoolConfig"/>-->
    <!--<constructor-arg index="1">-->
    <!--<list>-->
    <!--<bean name="master" class="redis.clients.jedis.JedisShardInfo">-->
    <!--<constructor-arg index="0" value="127.0.0.1"/>-->
    <!--<constructor-arg index="1" value="6379" type="int"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash;<bean name="slaver" class="redis.clients.jedis.JedisShardInfo">&ndash;&gt;-->
    <!--&lt;!&ndash;<constructor-arg index="0" value="${redis.slaver.host}"/>&ndash;&gt;-->
    <!--&lt;!&ndash;<constructor-arg index="1" value="${redis.slaver.port}" type="int"/>&ndash;&gt;-->
    <!--&lt;!&ndash;</bean>&ndash;&gt;-->
    <!--</list>-->
    <!--</constructor-arg>-->
    <!--</bean>-->

    <!--cache配置-->
    <bean id="methodCacheInterceptor" class="com.team1.ssm.intercept.MethodCacheInterceptor">
        <property name="redisUtil" ref="redisUtil"/>
    </bean>
    <bean id="redisUtil" class="com.team1.ssm.util.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

    <!--配置切面拦截方法 -->
    <aop:config proxy-target-class="true">
        <!--将com.crossoverJie.service包下的所有select开头的方法加入拦截
        去掉select则加入所有方法w
        -->
        <aop:pointcut id="controllerMethodPointcut" expression="
        execution(* com.team1.ssm.service.*.select*(..))"/>

        <aop:pointcut id="selectMethodPointcut" expression="
        execution(* com.team1.ssm.mapper.*Mapper.select*(..))"/>

        <aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>
    </aop:config>
</beans>